package com.example.CRUD_spring.controller;

import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import com.example.CRUD_spring.entities.User;
import com.example.CRUD_spring.repositories.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;



@Controller
//@RestController // This means that this class is a Controller for API
// @RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

    // /demo/add?name=....&email=...
  @GetMapping(path="/add") // Map ONLY POST Requests 
  public String addNewUser (@RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    
    n.setName(name);
    n.setEmail(email);
    // n.setDateTime();
    userRepository.save(n);
 
    return "redirect:/" ;
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  
  @GetMapping(path="/")
  public String index(ModelMap model){
    // String name = "Suphachai";
    model.addAttribute("allUser", userRepository.findAll());

    return "index";
  }
  @GetMapping("/show")
  @ResponseBody
  public Iterable<User> getAll(){
    return userRepository.findAll();
  }

  @GetMapping("/del/{id}")
  public String delUser(@PathVariable String id){
      userRepository.deleteById(Integer.parseInt(id));
      return "redirect:/";
     
  }
  
  @GetMapping("/edit/{id}")
  public String editUser(@PathVariable String id ,@RequestParam(defaultValue = "") String name,@RequestParam(defaultValue = "") String email){

      return "redirect:/";
  }
 
}
